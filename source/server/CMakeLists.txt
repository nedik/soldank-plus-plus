file(GLOB_RECURSE LIB_SOURCES *.cpp)
file(GLOB_RECURSE HEADER_SOURCES *.hpp)
list(REMOVE_ITEM LIB_SOURCES main.cpp)


add_library(server_lib ${LIB_SOURCES} ${HEADER_SOURCES})

target_compile_definitions(server_lib PRIVATE ${SERVER_COMPILE_DEFINITIONS})

if(MSVC)
  target_compile_options(server_lib PRIVATE /Wall)
else()
  target_compile_options(server_lib PRIVATE -Wall -Wextra -Wpedantic)
endif()

target_include_directories(server_lib PRIVATE ${CMAKE_SOURCE_DIR}/source/server)
target_include_directories(server_lib PRIVATE ${simpleini_SOURCE_DIR})
target_include_directories(server_lib PRIVATE ${dascript_SOURCE_DIR}/include)

target_link_libraries(server_lib PRIVATE shared_lib)
target_link_libraries(server_lib PRIVATE GameNetworkingSockets::GameNetworkingSockets)
target_link_libraries(server_lib PRIVATE spdlog::spdlog)
target_link_libraries(server_lib PRIVATE libDaScript)
target_link_libraries(server_lib PRIVATE httplib::httplib)
target_link_libraries(server_lib PRIVATE Threads::Threads)
add_dependencies(server_lib libDaScript)

add_executable(server main.cpp)
target_compile_definitions(server PRIVATE ${SERVER_COMPILE_DEFINITIONS})

if(MSVC)
  target_compile_options(server PRIVATE /Wall)
  set_target_properties(server PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
else()
  target_compile_options(server PRIVATE -Wall -Wextra -Wpedantic)
  set_target_properties(server PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin/${CMAKE_BUILD_TYPE})
endif()

target_link_libraries(server PRIVATE shared_lib)
target_link_libraries(server PRIVATE server_lib)
target_link_libraries(server PRIVATE GameNetworkingSockets::GameNetworkingSockets)
target_link_libraries(server PRIVATE spdlog::spdlog)
target_link_libraries(server PRIVATE libDaScript)
target_link_libraries(server PRIVATE httplib::httplib)
target_link_libraries(server PRIVATE Threads::Threads)
add_dependencies(server libDaScript)
target_include_directories(server_lib PRIVATE ${dascript_SOURCE_DIR}/include)
target_include_directories(server PRIVATE ${CMAKE_SOURCE_DIR}/source/server)
target_include_directories(server PRIVATE ${dascript_SOURCE_DIR}/include)
install(TARGETS server DESTINATION ${CMAKE_SOURCE_DIR}/bin/$<CONFIG>)
